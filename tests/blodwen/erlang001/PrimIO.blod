module PrimIO

import Stuff

public export
data IORes : Type -> Type where
     MkIORes : (result : a) -> (1 x : %World) -> IORes a

export
data IO : Type -> Type where
     MkIO : (1 fn : (1 x : %World) -> IORes a) -> IO a

io_bind : IO a -> (a -> IO b) -> IO b
io_bind (MkIO fn)
    = \k => MkIO (\w => let MkIORes x' w' = fn w 
                            MkIO res = k x' in
                            res w')

%extern prim__putStr : String -> (1 x : %World) -> IORes ()
%extern prim__getStr : (1 x : %World) -> IORes String

public export
data FArgList : Type where
     Nil : FArgList
     (::) : {a : Type} -> a -> FArgList -> FArgList

%extern prim__schemeCall : (ret : Type) -> String -> FArgList -> 
                           (1 x : % World) -> IORes ret

export %inline
schemeCall : (ret : Type) -> String -> FArgList -> IO ret
schemeCall ret fn args = MkIO (prim__schemeCall ret fn args)

export
display : String -> IO ()
display msg = schemeCall () "display" [msg]

export
putStr : String -> IO ()
putStr str = MkIO (prim__putStr str)

export
putStrLn : String -> IO ()
putStrLn str = putStr (str ++ "\n")

export
getStr : IO String
getStr = MkIO prim__getStr

infixl 1 >>=

export
(>>=) : IO a -> (a -> IO b) -> IO b
(>>=) = io_bind

unsafeCreateWorld : (1 f : (1 x : %World) -> a) -> a
unsafeCreateWorld f = f %MkWorld

unsafeDestroyWorld : (1 x : %World) -> a -> a
unsafeDestroyWorld %MkWorld x = x

export
unsafePerformIO : IO a -> a
unsafePerformIO (MkIO f)
    = unsafeCreateWorld (\w => case f w of
                               MkIORes res w' => unsafeDestroyWorld w' res)

